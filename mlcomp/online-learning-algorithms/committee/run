#! /usr/bin/env python

import sys
import util
import winnow
import perceptron
import mira

weights = util.Counter()
numupdates = 0
alpha = 1
numsubs = 3
subexperts = []
legalLabels = []

def score(subex, data, label):
    subpred = subex.classify(data)
    return subpred[label]

def initialize():
    global legalLabels
    legalLabels = [1,]
    subexperts.append(winnow.Winnow())
    subexperts.append(perceptron.Perceptron())
    subexperts.append(mira.Mira())
    for n in range(numsubs):
        weights[n] = float(1)/numsubs

def classify(data):
    vectors = util.Counter()
    for i in range(numsubs):
        for l in legalLabels:
            vectors[l] = weights[i] * score(subexperts[i], data, l)
    return vectors.argMax()

def update(label, guess, data):
#simultaneously update subexpert and reliability
    if guess != label:
        if not label in legalLabels:
            legalLabels.append(label)
        for i in range(numsubs):
            error = score(subexperts[i], data, label) - score(subexperts[i], data, guess)
            subexperts[i].update(label, guess, data)
            weights[i] = (alpha ** error) * weights[i]
        weights.normalize()


sys.stderr.write('Started')
line = sys.stdin.readline()
initialize()
while (line):
    features_values = line.split(" ")
    
    c = util.Counter()
    for feature, value in [(n, y.strip()) for n, y in [x.split(":") for x in features_values]]:
        c[int(feature)] = float(value)

    guess = classify(c)
    sys.stdout.write(str(guess) + "\n")
    sys.stdout.flush()

    label = int(sys.stdin.readline().strip())

    update(label, guess, c)
    line = sys.stdin.readline()
